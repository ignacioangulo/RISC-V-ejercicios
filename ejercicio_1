# ---------------------------------------------------Enunciado---------------------------------------------------
# Desarrolla un programa en ensamblador RV32I capaz de recorrer un vector de unsigned bytes y encontrar los dos 
# valores máximos almacenados. # El vector comienza en la dirección de memoria 0x10010000 y finaliza en la
# dirección 0x1001007F.
#----------------------------------------------------------------------------------------------------------------

.data #inicio el vector de datos con valores para que el máximo sea 252 (0xFC y 0xFA)
.byte   0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 252, 245, 235, 225, 215, 205, 195, 185, 175, 165, 155, 145, 135, 125, 115, 105, 95, 85, 75, 65, 55, 45, 35, 25, 15, 5

.text
.globl _start

_start:
    # Inicializar variables
    li t0, 0          # Contador del bucle
    li t1, 0          # Variable para almacenar el máximo valor encontrado
    li t2, 0          # Variable para almacenar el segundo máximo valor encontrado
    li t4, 0x80	      # Registro que contiene el número de posiciones del vector
    li a0, 0x10010000 # Puntero a la primera posición del vector

    # Bucle para recorrer el vector
loop:
    lbu t3, (a0)    # Cargar un byte del vector
    bgeu t3, t1, update_max    # Si el byte es mayor o igual que el máximo actual, actualizar el máximo
    bgeu t3, t2, update_second_max    # Si el byte es mayor o igual que el segundo máximo actual, actualizar el segundo máximo
next:
    addi t0, t0, 1    # Incrementar el contador del bucle
    addi a0, a0, 1    # Incrementar el puntero a la siguinete dirección 
    bltu t0, t4, loop    # Si no se ha llegado al final del vector, repetir el bucle

    # Imprimir los resultados
    ebreak

update_max:
    mv t2, t1    # Guardar el máximo actual como segundo máximo
    mv t1, t3    # Actualizar el máximo con el nuevo valor
    j next

update_second_max:
    mv t2, t3    # Actualizar el segundo máximo con el nuevo valor
    j next
