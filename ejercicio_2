# ----------------------------------------------Enunciado----------------------------------------------
# Desarrolla un programa en ensamblador RV32I capaz de recorrer un vector de unsigned halfwords (16 
# bits) y calcular la media entre todos sus valores. El vector comienza en la dirección de memoria 
# 0x10010000 y finaliza en la 0x1001007F. Piensa que el vector tiene 128 posiciones (2^7)
# -----------------------------------------------------------------------------------------------------

.data #inicialización del vector
.byte   0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 255, 245, 235, 225, 215, 205, 195, 185, 175, 165, 155, 145, 135, 125, 115, 105, 95, 85, 75, 65, 55, 45, 35, 25, 15, 5


.text
.globl _start

_start:
    # Inicializar variables
    li t0, 0          # Contador del bucle (Se irá incrementando de 2 en 2 por ser datos half)
    li t1, 0          # Variable para almacenar la suma total
    li t2, 64        # Número de elementos en el vector 
    li t3, 0          # Variable para almacenar el resultado de la media
    li a0, 0x10010000 # Dirección inicial del vector

    # Bucle para recorrer el vector y calcular la suma total
loop:
    lhu t4, (a0)    # Cargar una halfword del vector
    add t1, t1, t4    # Sumar el valor al acumulador
    addi a0, a0, 2    # Siguiente dato half
    addi t0, t0, 2    # Incrementar el contador del bucle en 2 (halfword)
    bltu t0, t2, loop    # Si no se ha llegado al final del vector, repetir el bucle

    # Calcular la media
    srli t3, t1, 6    # Dividir la suma total entre el número de elementos (t1 / 2⁶)

    # Imprimir el resultado
    ebreak
